import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as o,d as e,a as t,b as r,o as l}from"./app-BImRTQmU.js";const a="/my-blog/assets/SpringBoot%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B-h3lairVg.png",p={};function s(g,i){return l(),o("div",null,[i[0]||(i[0]=e("p",null,"Spring Boot 基于 Spring 开发，Spirng Boot 本身并不提供 Spring 框架的核⼼特性以及扩展功能，只是⽤于快速、敏捷地开发新⼀代基于 Spring 框架的应⽤程序。它并不是⽤来替代 Spring 的解决⽅案，⽽是和 Spring 框架紧密结合⽤于提升 Spring 开发者体验的⼯具。",-1)),t(" more "),i[1]||(i[1]=r('<h2 id="spring-boot" tabindex="-1"><a class="header-anchor" href="#spring-boot"><span>Spring Boot</span></a></h2><p>Spring Boot 基于 Spring 开发，Spirng Boot 本身并不提供 Spring 框架的核⼼特性以及扩展功能，只是⽤于快速、敏捷地开发新⼀代基于 Spring 框架的应⽤程序。它并不是⽤来替代 Spring 的解决⽅案，⽽是和 Spring 框架紧密结合⽤于提升 Spring 开发者体验的⼯具。</p><h3 id="核心功能" tabindex="-1"><a class="header-anchor" href="#核心功能"><span>核心功能</span></a></h3><ul><li>可独立运行的Spring项目：Spring Boot可以以jar包的形式独立运行。</li><li>内嵌的Servlet容器：Spring Boot可以选择内嵌Tomcat、Jetty或者Undertow，无须以war包形式部署项目。</li><li>简化的Maven配置：Spring提供推荐的基础 POM 文件来简化Maven 配置。</li><li>自动配置Spring：Spring Boot会根据项目依赖来自动配置Spring 框架，极大地减少项目要使用的配置。</li><li>提供生产就绪型功能：提供可以直接在生产环境中使用的功能，如性能指标、应用信息和应用健康检查。</li><li>无代码生成和xml配置：Spring Boot不生成代码。完全不需要任何xml配置即可实现Spring的所有配置。</li></ul><h3 id="核心特性" tabindex="-1"><a class="header-anchor" href="#核心特性"><span>核心特性</span></a></h3><ul><li>自动配置：Spring Boot会根据项目依赖来自动配置Spring 框架，极大地减少项目要使用的配置。</li><li>起步依赖：Spring Boot提供了一组依赖，通过这些依赖，开发者可以快速创建Spring Boot应用。</li><li>嵌入式容器：Spring Boot可以以jar包的形式独立运行，无需以war包形式部署项目。</li></ul><h3 id="启动流程" tabindex="-1"><a class="header-anchor" href="#启动流程"><span>启动流程</span></a></h3><figure><img src="'+a+'" alt="SpringBoot启动流程.png" tabindex="0" loading="lazy"><figcaption>SpringBoot启动流程.png</figcaption></figure><h3 id="微服务中实现session共享" tabindex="-1"><a class="header-anchor" href="#微服务中实现session共享"><span>微服务中实现session共享</span></a></h3><ol><li>基于Token的无状态：使用JWT等Token机制，将会话存储在客户端token中。服务端无需存储session，通过签名验证token有效性；</li><li>集中式存储：将会话数据存储在Redis等分布式缓存中，服务节点通过共享Session id访问中央存储；</li><li>会话复制：通过组播等方式在集群节点间同步session变化。</li></ol><h3 id="在spring-boot启动时执行特定代码" tabindex="-1"><a class="header-anchor" href="#在spring-boot启动时执行特定代码"><span>在Spring Boot启动时执行特定代码</span></a></h3><ul><li>实现CommandLineRunner接口；</li><li>实现ApplicationRunner接口；</li><li>使用@PostConstruct注解；</li><li>监听ApplicationReadyEvent事件；</li></ul><h3 id="spring-boot的启动依赖" tabindex="-1"><a class="header-anchor" href="#spring-boot的启动依赖"><span>Spring Boot的启动依赖</span></a></h3><p>起步依赖是Spring Boot提供的一种特殊依赖描述符，它通过聚合相关技术的依赖来简化配置。主要体现在：</p><ul><li>依赖管理简化：自动解决版本兼容问题；</li><li>开箱即用：提供合理的默认配置，开发者只需关注业务逻辑；</li><li>模块化设计：按功能划分的依赖包使项目结构更清晰；</li></ul><h3 id="spring-boot如何知道要创建哪个bean" tabindex="-1"><a class="header-anchor" href="#spring-boot如何知道要创建哪个bean"><span>Spring Boot如何知道要创建哪个Bean</span></a></h3><ul><li>组件扫描：通过@ComponentScan注解及其派生注解标记的所有类；</li><li>自动配置：@EnableAutoConfiguration会加载jar包中的所有自动配置类；</li><li>条件化创建：自动配置类中的@Bean方法；</li><li>配置属性绑定：通过@ConfigurationProperties将yml中的配置绑定到Bean属性上；</li></ul><h3 id="spring-boot的配置文件分类" tabindex="-1"><a class="header-anchor" href="#spring-boot的配置文件分类"><span>Spring Boot的配置文件分类</span></a></h3><ul><li>命令行参数：通过--key=value的形式设置，优先级最高；</li><li>Java系统属性：System.getProperties()；</li><li>操作系统环境变量；</li><li>配置文件</li></ul><h3 id="spring-boot支持嵌入的web容器" tabindex="-1"><a class="header-anchor" href="#spring-boot支持嵌入的web容器"><span>Spring Boot支持嵌入的Web容器</span></a></h3><ul><li>Tomcat：默认，性能稳定，适用大多数的应用场景；</li><li>Jetty：快速启动和地内存占用；</li><li>Undertow：需要Web Socket支持时，性能最高；</li></ul><h3 id="spring-boot处理跨域" tabindex="-1"><a class="header-anchor" href="#spring-boot处理跨域"><span>Spring Boot处理跨域</span></a></h3><ul><li>全局配置：通过WebMvcConfigurer接口实现</li><li>局部配置：使用@CrossOrigin注解</li><li>过滤器方式：通过自定义CorsFilter</li></ul>',23))])}const d=n(p,[["render",s],["__file","index.html.vue"]]),h=JSON.parse('{"path":"/article/Java/SpringBoot/","title":"SpringBoot知识点","lang":"zh-CN","frontmatter":{"title":"SpringBoot知识点","category":["Java"],"description":"Spring Boot 基于 Spring 开发，Spirng Boot 本身并不提供 Spring 框架的核⼼特性以及扩展功能，只是⽤于快速、敏捷地开发新⼀代基于 Spring 框架的应⽤程序。它并不是⽤来替代 Spring 的解决⽅案，⽽是和 Spring 框架紧密结合⽤于提升 Spring 开发者体验的⼯具。","head":[["meta",{"property":"og:url","content":"https://java-st.blog.csdn.net/my-blog/article/Java/SpringBoot/"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"SpringBoot知识点"}],["meta",{"property":"og:description","content":"Spring Boot 基于 Spring 开发，Spirng Boot 本身并不提供 Spring 框架的核⼼特性以及扩展功能，只是⽤于快速、敏捷地开发新⼀代基于 Spring 框架的应⽤程序。它并不是⽤来替代 Spring 的解决⽅案，⽽是和 Spring 框架紧密结合⽤于提升 Spring 开发者体验的⼯具。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-07T02:26:20.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-07T02:26:20.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"SpringBoot知识点\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-08-07T02:26:20.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"宋涛\\",\\"url\\":\\"https://java-st.blog.csdn.net/\\"}]}"]]},"headers":[{"level":2,"title":"Spring Boot","slug":"spring-boot","link":"#spring-boot","children":[{"level":3,"title":"核心功能","slug":"核心功能","link":"#核心功能","children":[]},{"level":3,"title":"核心特性","slug":"核心特性","link":"#核心特性","children":[]},{"level":3,"title":"启动流程","slug":"启动流程","link":"#启动流程","children":[]},{"level":3,"title":"微服务中实现session共享","slug":"微服务中实现session共享","link":"#微服务中实现session共享","children":[]},{"level":3,"title":"在Spring Boot启动时执行特定代码","slug":"在spring-boot启动时执行特定代码","link":"#在spring-boot启动时执行特定代码","children":[]},{"level":3,"title":"Spring Boot的启动依赖","slug":"spring-boot的启动依赖","link":"#spring-boot的启动依赖","children":[]},{"level":3,"title":"Spring Boot如何知道要创建哪个Bean","slug":"spring-boot如何知道要创建哪个bean","link":"#spring-boot如何知道要创建哪个bean","children":[]},{"level":3,"title":"Spring Boot的配置文件分类","slug":"spring-boot的配置文件分类","link":"#spring-boot的配置文件分类","children":[]},{"level":3,"title":"Spring Boot支持嵌入的Web容器","slug":"spring-boot支持嵌入的web容器","link":"#spring-boot支持嵌入的web容器","children":[]},{"level":3,"title":"Spring Boot处理跨域","slug":"spring-boot处理跨域","link":"#spring-boot处理跨域","children":[]}]}],"git":{"createdTime":1745761076000,"updatedTime":1754533580000,"contributors":[{"name":"stao","username":"stao","email":"2944922490@qq.com","commits":3,"url":"https://github.com/stao"}]},"readingTime":{"minutes":3.2,"words":959},"filePathRelative":"article/Java/SpringBoot/index.md","localizedDate":"2025年4月27日","excerpt":"<p>Spring Boot 基于 Spring 开发，Spirng Boot 本身并不提供 Spring 框架的核⼼特性以及扩展功能，只是⽤于快速、敏捷地开发新⼀代基于 Spring 框架的应⽤程序。它并不是⽤来替代 Spring 的解决⽅案，⽽是和 Spring 框架紧密结合⽤于提升 Spring 开发者体验的⼯具。</p>\\n","autoDesc":true}');export{d as comp,h as data};
