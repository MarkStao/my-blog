import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,d as l,a as r,b as i,o as t}from"./app-BImRTQmU.js";const s="/my-blog/assets/IO%E6%B5%81-19TXbg8u.png",h="/my-blog/assets/JVM-Dg6AkdtW.png",p="/my-blog/assets/%E9%94%81%E5%8D%87%E7%BA%A7-iHDUTYzh.png",c="/my-blog/assets/%E7%BA%BF%E7%A8%8B%E6%B1%A0%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B-BnJC15Fi.png",d={};function o(_,a){return t(),n("div",null,[a[0]||(a[0]=l("p",null,"记录面试题的简单回答，便于记忆，实际可按理解扩充。",-1)),r(" more "),a[1]||(a[1]=i('<h2 id="基础题" tabindex="-1"><a class="header-anchor" href="#基础题"><span>基础题</span></a></h2><h3 id="_1-面向对象和面向过程的区别" tabindex="-1"><a class="header-anchor" href="#_1-面向对象和面向过程的区别"><span>1.面向对象和面向过程的区别</span></a></h3><p>面向过程：是分析解决问题的步骤，然后用函数一步步实现，性能高；<br> 面向对象：是把构成问题的要素拆分成对象，易维护、复用、拓展。</p><h3 id="_2-instanceof关键字段作用" tabindex="-1"><a class="header-anchor" href="#_2-instanceof关键字段作用"><span>2.instanceof关键字段作用</span></a></h3><p>判断一个对象是否为一个类的实例。</p><h3 id="_3-java自动装箱和拆箱" tabindex="-1"><a class="header-anchor" href="#_3-java自动装箱和拆箱"><span>3.Java自动装箱和拆箱</span></a></h3><p>装箱就是自动将基本数据类型转换为对应的包装类对象；<br> 拆箱就是自动将包装器类型转换为基本数据类型。</p><h3 id="_4-hashcode的作用" tabindex="-1"><a class="header-anchor" href="#_4-hashcode的作用"><span>4.Hashcode的作用</span></a></h3><p>该方法用于提高查找效率，通过哈希算法分成若干区域，存储元素时通过调用该方法根据哈希值迅速定位到对应到应存储的位置。</p><h3 id="_5-string、stringbuffer、stringbuilder的区别" tabindex="-1"><a class="header-anchor" href="#_5-string、stringbuffer、stringbuilder的区别"><span>5.String、StringBuffer、StringBuilder的区别</span></a></h3><p>String：只读字符串，每次使用都会创建一个新对象；<br> StringBuffer: 可变字符串，线程安全，效率低；<br> StringBuilder: 可变字符串，线程不安全，效率高.</p><h3 id="_6-arraylist和linklist的区别" tabindex="-1"><a class="header-anchor" href="#_6-arraylist和linklist的区别"><span>6.ArrayList和LinkList的区别</span></a></h3><p>ArrayList：底层是数组，查改效率高，增删效率低；<br> LinkList：底层是链表，查改效率低，增删效率高。</p><h3 id="_7-hashmap和hashtable的区别" tabindex="-1"><a class="header-anchor" href="#_7-hashmap和hashtable的区别"><span>7.HashMap和HashTable的区别</span></a></h3><p>HashMap：父类为AbstractMap类，key和value可以为空，线程不安全，效率高；<br> HashTable：父类为Dictionary类，key和value不能为空，线程安全，效率低。</p><h3 id="_8-java的四种引用-强软弱虚" tabindex="-1"><a class="header-anchor" href="#_8-java的四种引用-强软弱虚"><span>8.Java的四种引用（强软弱虚）</span></a></h3><p>强引用：默认的引用，只要垃圾回收器不进行回收，该对象就不会被回收；<br> 软引用：内存不足时，会被回收；<br> 弱引用：JVM垃圾回收器发现了，会被回收；<br> 虚引用：JVM垃圾回收器发现了，会被回收，但回收前会进入引用队列，可以监听到被回收。</p><h3 id="_9-泛型的特点" tabindex="-1"><a class="header-anchor" href="#_9-泛型的特点"><span>9.泛型的特点</span></a></h3><p>在定义类、接口、方法时，添加类型参数，在编译时确定类型。</p><h3 id="_10-java创建对象的几种方式" tabindex="-1"><a class="header-anchor" href="#_10-java创建对象的几种方式"><span>10.Java创建对象的几种方式</span></a></h3><p>new关键字；反射；克隆；序列化。</p><h3 id="_11-浅拷贝和深拷贝的区别" tabindex="-1"><a class="header-anchor" href="#_11-浅拷贝和深拷贝的区别"><span>11.浅拷贝和深拷贝的区别</span></a></h3><p>浅拷贝：不复制引用的对象；<br> 深拷贝：引用的对象也复制。</p><h3 id="_12-final的用法" tabindex="-1"><a class="header-anchor" href="#_12-final的用法"><span>12.final的用法</span></a></h3><p>final修饰类：不能被继承；<br> final修饰方法：不能被重写；<br> final修饰变量：又称常量，编译会存入常量池，引用不能被修改，但引用的值可变。</p><h3 id="_13-static的用法" tabindex="-1"><a class="header-anchor" href="#_13-static的用法"><span>13.static的用法</span></a></h3><p>修饰方法和变量：转换为静态方法和变量，不用new对象就可以调用;<br> 修饰代码块：在类加载时执行，只执行一次；<br> 修饰导入：可直接访问该包下的静态资源。</p><h3 id="_14-a-a-b与a-b的区别" tabindex="-1"><a class="header-anchor" href="#_14-a-a-b与a-b的区别"><span>14.a=a+b与a+=b的区别</span></a></h3><p>+=会进行隐式自动类型转换，a=a+b不会。</p><h3 id="_15-exception和error的区别" tabindex="-1"><a class="header-anchor" href="#_15-exception和error的区别"><span>15.Exception和Error的区别</span></a></h3><p>Exception：分为运行时异常和被检查异常，可以捕获；<br> Error：编译器不会检查，不能捕获。</p><h3 id="_16-oom和sof的区别" tabindex="-1"><a class="header-anchor" href="#_16-oom和sof的区别"><span>16.OOM和SOF的区别</span></a></h3><p>OOM：Jvm堆溢出；JVM的栈扩展超出资源容量；常量池溢出；方法区溢出；<br> SOF：栈溢出，一般默认为1-2m，一般是死循环和深度递归导致。</p><h3 id="_17-程序、进程、线程的关系" tabindex="-1"><a class="header-anchor" href="#_17-程序、进程、线程的关系"><span>17.程序、进程、线程的关系</span></a></h3><p>程序：程序包含程序代码和数据，是可执行文件；<br> 进程：进程是程序的一次执行过程，是资源分配的最小单位；<br> 线程：也称轻量级进程，是进程内多个执行流的执行单元，线程之间可相互影响。</p><h3 id="_18-java序列或中某些字段不参与序列化" tabindex="-1"><a class="header-anchor" href="#_18-java序列或中某些字段不参与序列化"><span>18.Java序列或中某些字段不参与序列化</span></a></h3><p>使用transient关键字修饰，只能修饰变量。</p><h3 id="_19-io流" tabindex="-1"><a class="header-anchor" href="#_19-io流"><span>19.IO流</span></a></h3><p>按流向分为输入流和输出流，按操作单元分为字节流和字符流，按角色分为节点流和处理流。<br><img src="'+s+'" alt="IO流" loading="lazy"></p><h3 id="_20-java的反射" tabindex="-1"><a class="header-anchor" href="#_20-java的反射"><span>20.Java的反射</span></a></h3><p>通过类名，可知该类的所有属性和方法，并动态调用；<br> 可以通过Class.forName()、getClass()、.Class来获取Class对象。</p><h3 id="_21-list、set、map的区别" tabindex="-1"><a class="header-anchor" href="#_21-list、set、map的区别"><span>21.List、Set、Map的区别</span></a></h3><p>List：有序，可重复；<br> Set：无序，不可重复；<br> Map：无序，键值对，键不可重复。</p><h3 id="_22-fail-fast事件" tabindex="-1"><a class="header-anchor" href="#_22-fail-fast事件"><span>22.fail-fast事件</span></a></h3><p>多个线程同时操作同一个集合时，如果其中一个线程修改了集合，就会抛出ConcurrentModificationException异常，产生fail-fast事件，需使用java.util.concurrent包下的集合类。</p><h3 id="_23-hashmap的长度为什么是2的n次方" tabindex="-1"><a class="header-anchor" href="#_23-hashmap的长度为什么是2的n次方"><span>23.HashMap的长度为什么是2的N次方</span></a></h3><p>需要减少hash值的碰撞，保证数据均匀分配，2的N次方将%操作转换成&amp;操作，提高运算效率。</p><h2 id="jvm" tabindex="-1"><a class="header-anchor" href="#jvm"><span>JVM</span></a></h2><figure><img src="'+h+'" alt="JVM" tabindex="0" loading="lazy"><figcaption>JVM</figcaption></figure><h3 id="_1-jvm内存模型" tabindex="-1"><a class="header-anchor" href="#_1-jvm内存模型"><span>1.JVM内存模型</span></a></h3><p>线程独占： 栈、本地方法栈、程序计数器；<br> 线程共享： 堆、方法区；</p><h3 id="_2-类的生命周期" tabindex="-1"><a class="header-anchor" href="#_2-类的生命周期"><span>2.类的生命周期</span></a></h3><p>加载字节码文件，验证文件要求，分配内存，解析引用，初始化静态内容，实际使用，GC卸载回收</p><h3 id="_3-双亲委派模式" tabindex="-1"><a class="header-anchor" href="#_3-双亲委派模式"><span>3.双亲委派模式</span></a></h3><p>加载器加载类时，先将请求委托给父类加载器，如果父类不能加载，再自己加载。</p><h3 id="_4-堆和栈的区别" tabindex="-1"><a class="header-anchor" href="#_4-堆和栈的区别"><span>4.堆和栈的区别</span></a></h3><p>堆：存放对象，线程共享，存储空间大；<br> 栈：存放局部变量和方法调用，线程私有，存储空间小。</p><h3 id="_5-判断对象是否可被回收" tabindex="-1"><a class="header-anchor" href="#_5-判断对象是否可被回收"><span>5.判断对象是否可被回收</span></a></h3><p>引用计数为0，可达性分析。</p><h3 id="_6-垃圾回收算法" tabindex="-1"><a class="header-anchor" href="#_6-垃圾回收算法"><span>6.垃圾回收算法</span></a></h3><p>标记清除：标记为0的清除，标记为1的不清除；<br> 标记整理：标记为1的保留，标记为0的清除，并调整内存地址。<br> 复制算法：将内存分为两块，每次只使用一块，当一块内存满时，将另一块内存复制到第一块，再使用第一块。<br> 标记压缩：标记为1的保留，标记为0的清除，并调整内存地址，减少内存碎片。<br> 分代收集算法：分为新生代和老年代，每次只回收其中一块，当一块内存满时，将另一块内存复制到第一块，再使用第一块。</p><h3 id="_7-jvm调优参数" tabindex="-1"><a class="header-anchor" href="#_7-jvm调优参数"><span>7.JVM调优参数</span></a></h3><p>-Xms：初始堆大小；<br> -Xmx：最大堆大小；<br> -XX:NewSize：新生代大小；<br> -XX:MaxNewSize：最大新生代大小；<br> -XX:SurvivorRatio：Eden区与Survivor区的比例；<br> -XX:+UserParallelGC：使用并行垃圾回收算法（年轻代）；<br> -XX:+UseConcMarkSweepGC：使用并发标记清除算法（年老代）; <br> ...</p><h2 id="多线程" tabindex="-1"><a class="header-anchor" href="#多线程"><span>多线程</span></a></h2><h3 id="_1-实现多线程的方法" tabindex="-1"><a class="header-anchor" href="#_1-实现多线程的方法"><span>1.实现多线程的方法</span></a></h3><p>1.继承Thread类；<br> 2.实现Runnable接口；<br> 3.实现Callable接口；<br> 4.使用线程池。</p><h3 id="_2-如何停止正在运行的线程" tabindex="-1"><a class="header-anchor" href="#_2-如何停止正在运行的线程"><span>2.如何停止正在运行的线程</span></a></h3><p>1.使用退出标志；<br> 2.使用stop方法；<br> 3.使用interrupt方法。</p><h3 id="_3-notify-和notifyall-的区别" tabindex="-1"><a class="header-anchor" href="#_3-notify-和notifyall-的区别"><span>3.notify()和notifyAll()的区别</span></a></h3><p>1.notify()：随机唤醒一个等待线程，可能导致死锁；<br> 2.notifyAll()：唤醒所有等待线程。</p><h3 id="_4-sleep-和wait-的区别" tabindex="-1"><a class="header-anchor" href="#_4-sleep-和wait-的区别"><span>4.sleep()和wait()的区别</span></a></h3><p>1.sleep()：属于Thread类，线程休眠，不会释放锁；<br> 2.wait()：属于Object类，线程等待，会释放锁。</p><h3 id="_5-volatile的作用" tabindex="-1"><a class="header-anchor" href="#_5-volatile的作用"><span>5.volatile的作用</span></a></h3><p>1.保证不同线程对同一变量操作的可见性；<br> 2.禁止指令重排序；<br> 3.一般用于状态标记量和单例模式的双检锁。</p><h3 id="_6-thread类中的start-和run-的区别" tabindex="-1"><a class="header-anchor" href="#_6-thread类中的start-和run-的区别"><span>6.Thread类中的start()和run()的区别</span></a></h3><p>start()方法会创建一个新线程，并调用该线程的run()方法；<br> run()方法只是调用线程的run()方法，不会创建新线程。</p><h3 id="_7-为什么wait和notify方法必须在同步代码块中执行" tabindex="-1"><a class="header-anchor" href="#_7-为什么wait和notify方法必须在同步代码块中执行"><span>7.为什么wait和notify方法必须在同步代码块中执行</span></a></h3><p>1.只有在调用线程拥有某个对象的独占锁时，才能调用wait()和notify()方法；<br> 2.如果不在同步代码块中执行，则调用wait()和notify()方法会抛出IllegalMonitorStateException异常; <br> 3.避免wait和notify方法在多线程间发生竞争，导致死锁。</p><h3 id="_8-java中的synchronized和reentrantlock的区别" tabindex="-1"><a class="header-anchor" href="#_8-java中的synchronized和reentrantlock的区别"><span>8.Java中的synchronized和Reentrantlock的区别</span></a></h3><p>1.synchronized：是Java内置的关键字，属于关键字同步，属于JVM层，属于轻量级同步；<br> 2.Reentrantlock：是java.util.concurrent包下的类，属于锁对象，属于用户层，属于重量级同步。</p><h3 id="_9-synchronizedmap和concurrenthashmap的区别" tabindex="-1"><a class="header-anchor" href="#_9-synchronizedmap和concurrenthashmap的区别"><span>9.SynchronizedMap和ConcurrentHashMap的区别</span></a></h3><p>1.SynchronizedMap：是java.util包下的类，是线程安全的Map，是同步的；<br> 2.ConcurrentHashMap：是java.util.concurrent包下的类，是线程安全的Map，是并发的。</p><h3 id="_10-java线程池中submit-和execute-的区别" tabindex="-1"><a class="header-anchor" href="#_10-java线程池中submit-和execute-的区别"><span>10.Java线程池中submit()和execute()的区别</span></a></h3><p>1.submit()：返回Future对象，可以获取线程执行结果；<br> 2.execute()：直接执行线程，不能获取线程执行结果。</p><h3 id="_11-synchronized关键字的了解" tabindex="-1"><a class="header-anchor" href="#_11-synchronized关键字的了解"><span>11.synchronized关键字的了解</span></a></h3><p>synchronized关键字是Java语言提供的一种同步机制，用于保证多个线程对共享资源的互斥访问。被synchronized修饰的方法、变量和代码块，同一时刻只能有一个线程执行。</p><h3 id="_12-常用的线程池" tabindex="-1"><a class="header-anchor" href="#_12-常用的线程池"><span>12.常用的线程池</span></a></h3><p>1.Executors.newCachedThreadPool()：创建一个可缓存线程池，如果线程池长度超过处理需要，可灵活回收空闲线程，若无可回收，则新建线程。<br> 2.Executors.newFixedThreadPool()：创建一个定长线程池，可控制线程最大并发数，超出的线程会在队列中等待。<br> 3.Executors.newScheduledThreadPool()：创建一个大小无限线程池，支持定时及周期性任务执行。<br> 4.Executors.newSingleThreadExecutor()：创建一个单线程化的线程池，它只会用唯一的工作线程来执行任务，保证所有任务按照指定顺序(FIFO, LIFO, 优先级)执行。</p><h3 id="_13-简述线程池的理解" tabindex="-1"><a class="header-anchor" href="#_13-简述线程池的理解"><span>13.简述线程池的理解</span></a></h3><p>1.降低资源消耗：通过重复利用已创建的线程降低线程创建和销毁造成的消耗。<br> 2.提高响应速度：当任务到达时，任务可以不需要等到线程创建就能立即执行。<br> 3.提高线程的可管理性：线程是稀缺资源，如果无限制创建，不仅会消耗系统资源，还会降低系统稳定性，使用线程池可以进行统一的分配，调优和监控。</p><h3 id="_14-锁的优化机制" tabindex="-1"><a class="header-anchor" href="#_14-锁的优化机制"><span>14.锁的优化机制</span></a></h3><p>锁的状态从低到高依次为无锁 &gt; 偏向锁 &gt; 轻量级锁 &gt; 重量级锁，升级的过程就是从低到高，降级在一定条件也可能发生。<br> 自旋锁：让线程执行一个忙循环，防止从用户态转入内核态，默认次数是10次，可以使用-XX:+UseSpining来开启；<br> 自适应锁：就是自适应的自旋锁，自旋时间不固定，而是由前一次在同一个锁上的自旋时间和锁的持有者状态来决定；<br> 锁消除：指导是JVM检测到一些同步的代码块，完全不存在数据竞争的场景，就会进行锁消除；<br> 锁粗化：锁粗化指导是有很多操作都是对同一个对象进行加锁，就会把锁的同步范围扩展到整个操作序列之外；<br> 偏向锁：当线程访问同步块获取锁时，会在对象头和栈帧中的锁记录里存储偏向锁的线程ID，之后这个线程再次进入同步块都不需要CAS来加锁和解锁；<br> 轻量级锁：JVM的对象的对象头中包含一些锁的标志位，代码进入同步块的时候，JVM将会使用CAS方式来尝试获取锁，如果更新成功则会把对象头中的状态位标记为轻量级锁，如果更新失败，当前线程就尝试自旋来获取锁；<br><img src="'+p+'" alt="锁升级" loading="lazy"></p><h3 id="_15-产生死锁的四个必要条件" tabindex="-1"><a class="header-anchor" href="#_15-产生死锁的四个必要条件"><span>15.产生死锁的四个必要条件</span></a></h3><p>1.互斥条件：一个资源每次只能被一个线程使用；<br> 2.请求与保持条件：一个线程因请求资源而阻塞，对已获得的资源保持不放；<br> 3.不剥夺条件：进程已经获得的资源，在未使用完之前，不能强行剥夺；<br> 4.循环等待条件：若干线程之间形成一种头尾相接的循环等待资源关系；</p><h3 id="_16-线程池的核心线程数怎么设置" tabindex="-1"><a class="header-anchor" href="#_16-线程池的核心线程数怎么设置"><span>16.线程池的核心线程数怎么设置</span></a></h3><p>分为CPU密集型和IO密集型<br> CPU密集型：主要消耗的是CPU资源，可以将线程数设置为CPU核心数+1；<br> IO密集型：主要处理I/O交互，一般核心线程数=CPU核心数量*2。</p><h3 id="_17-线程安全需要保证几个基本特征" tabindex="-1"><a class="header-anchor" href="#_17-线程安全需要保证几个基本特征"><span>17.线程安全需要保证几个基本特征</span></a></h3><ul><li>原子性：相关操作不会中途被其它线程干扰，一般通过同步机制实现。</li><li>可见性：是一个线程修改了某个共享变量，其状态能够立即被其它线程知晓，通常被解释为将线程本地状态反映到主内存上，volatile就是负责保证可见性的。</li><li>有序性：是保证线程内串行语义，避免指令重排等。</li></ul><h3 id="_18-线程之间如何通信" tabindex="-1"><a class="header-anchor" href="#_18-线程之间如何通信"><span>18.线程之间如何通信</span></a></h3><p>共享内存和消息传递</p><h3 id="_19-线程池原理及核心参数" tabindex="-1"><a class="header-anchor" href="#_19-线程池原理及核心参数"><span>19.线程池原理及核心参数</span></a></h3><p>核心参数：最大线程数、核心线程数、活跃时间、阻塞队列、拒绝策略<br><img src="'+c+'" alt="线程池执行流程" loading="lazy"></p><h3 id="_19-线程池的拒绝策略" tabindex="-1"><a class="header-anchor" href="#_19-线程池的拒绝策略"><span>19.线程池的拒绝策略</span></a></h3><p>1.AbortPolicy：直接丢弃任务，抛出异常，默认策略；<br> 2.CallerRunsPolicy：只调用者所在线程来处理任务；<br> 3.DiscardOldestPolicy：丢弃等待队列中最旧的任务，并执行当前任务；<br> 4.DiscartPlicy：直接丢弃任务，也不抛出异常。</p><h3 id="_20-什么是aqs" tabindex="-1"><a class="header-anchor" href="#_20-什么是aqs"><span>20.什么是AQS</span></a></h3><p>抽象队列同步器：以双向队列的形式连接所有的Entry，比方说ReentranLock，所有等待的线程都被放在一个Entry中并连成双向队列，前面一个线程使用ReentranLock好了，则双向队列实际上的第一个Entry开始运行。<br> AQS定义了对双向队列所有操作，而只开放了tryLock和tryRelease方法给开发者使用，开发者可以根据自己的实现重写tryLock和tryRelease方法，以实现自己的并发控制。</p>',106))])}const f=e(d,[["render",o],["__file","index.html.vue"]]),v=JSON.parse('{"path":"/article/Java/%E9%9D%A2%E8%AF%95%E9%A2%98%E5%BA%93/","title":"面试题库","lang":"zh-CN","frontmatter":{"title":"面试题库","author":"宋涛","description":"记录面试题的简单回答，便于记忆，实际可按理解扩充。","head":[["meta",{"property":"og:url","content":"https://java-st.blog.csdn.net/my-blog/article/Java/%E9%9D%A2%E8%AF%95%E9%A2%98%E5%BA%93/"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"面试题库"}],["meta",{"property":"og:description","content":"记录面试题的简单回答，便于记忆，实际可按理解扩充。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-04-21T10:54:49.000Z"}],["meta",{"property":"article:author","content":"宋涛"}],["meta",{"property":"article:modified_time","content":"2025-04-21T10:54:49.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"面试题库\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-04-21T10:54:49.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"宋涛\\"}]}"]]},"headers":[{"level":2,"title":"基础题","slug":"基础题","link":"#基础题","children":[{"level":3,"title":"1.面向对象和面向过程的区别","slug":"_1-面向对象和面向过程的区别","link":"#_1-面向对象和面向过程的区别","children":[]},{"level":3,"title":"2.instanceof关键字段作用","slug":"_2-instanceof关键字段作用","link":"#_2-instanceof关键字段作用","children":[]},{"level":3,"title":"3.Java自动装箱和拆箱","slug":"_3-java自动装箱和拆箱","link":"#_3-java自动装箱和拆箱","children":[]},{"level":3,"title":"4.Hashcode的作用","slug":"_4-hashcode的作用","link":"#_4-hashcode的作用","children":[]},{"level":3,"title":"5.String、StringBuffer、StringBuilder的区别","slug":"_5-string、stringbuffer、stringbuilder的区别","link":"#_5-string、stringbuffer、stringbuilder的区别","children":[]},{"level":3,"title":"6.ArrayList和LinkList的区别","slug":"_6-arraylist和linklist的区别","link":"#_6-arraylist和linklist的区别","children":[]},{"level":3,"title":"7.HashMap和HashTable的区别","slug":"_7-hashmap和hashtable的区别","link":"#_7-hashmap和hashtable的区别","children":[]},{"level":3,"title":"8.Java的四种引用（强软弱虚）","slug":"_8-java的四种引用-强软弱虚","link":"#_8-java的四种引用-强软弱虚","children":[]},{"level":3,"title":"9.泛型的特点","slug":"_9-泛型的特点","link":"#_9-泛型的特点","children":[]},{"level":3,"title":"10.Java创建对象的几种方式","slug":"_10-java创建对象的几种方式","link":"#_10-java创建对象的几种方式","children":[]},{"level":3,"title":"11.浅拷贝和深拷贝的区别","slug":"_11-浅拷贝和深拷贝的区别","link":"#_11-浅拷贝和深拷贝的区别","children":[]},{"level":3,"title":"12.final的用法","slug":"_12-final的用法","link":"#_12-final的用法","children":[]},{"level":3,"title":"13.static的用法","slug":"_13-static的用法","link":"#_13-static的用法","children":[]},{"level":3,"title":"14.a=a+b与a+=b的区别","slug":"_14-a-a-b与a-b的区别","link":"#_14-a-a-b与a-b的区别","children":[]},{"level":3,"title":"15.Exception和Error的区别","slug":"_15-exception和error的区别","link":"#_15-exception和error的区别","children":[]},{"level":3,"title":"16.OOM和SOF的区别","slug":"_16-oom和sof的区别","link":"#_16-oom和sof的区别","children":[]},{"level":3,"title":"17.程序、进程、线程的关系","slug":"_17-程序、进程、线程的关系","link":"#_17-程序、进程、线程的关系","children":[]},{"level":3,"title":"18.Java序列或中某些字段不参与序列化","slug":"_18-java序列或中某些字段不参与序列化","link":"#_18-java序列或中某些字段不参与序列化","children":[]},{"level":3,"title":"19.IO流","slug":"_19-io流","link":"#_19-io流","children":[]},{"level":3,"title":"20.Java的反射","slug":"_20-java的反射","link":"#_20-java的反射","children":[]},{"level":3,"title":"21.List、Set、Map的区别","slug":"_21-list、set、map的区别","link":"#_21-list、set、map的区别","children":[]},{"level":3,"title":"22.fail-fast事件","slug":"_22-fail-fast事件","link":"#_22-fail-fast事件","children":[]},{"level":3,"title":"23.HashMap的长度为什么是2的N次方","slug":"_23-hashmap的长度为什么是2的n次方","link":"#_23-hashmap的长度为什么是2的n次方","children":[]}]},{"level":2,"title":"JVM","slug":"jvm","link":"#jvm","children":[{"level":3,"title":"1.JVM内存模型","slug":"_1-jvm内存模型","link":"#_1-jvm内存模型","children":[]},{"level":3,"title":"2.类的生命周期","slug":"_2-类的生命周期","link":"#_2-类的生命周期","children":[]},{"level":3,"title":"3.双亲委派模式","slug":"_3-双亲委派模式","link":"#_3-双亲委派模式","children":[]},{"level":3,"title":"4.堆和栈的区别","slug":"_4-堆和栈的区别","link":"#_4-堆和栈的区别","children":[]},{"level":3,"title":"5.判断对象是否可被回收","slug":"_5-判断对象是否可被回收","link":"#_5-判断对象是否可被回收","children":[]},{"level":3,"title":"6.垃圾回收算法","slug":"_6-垃圾回收算法","link":"#_6-垃圾回收算法","children":[]},{"level":3,"title":"7.JVM调优参数","slug":"_7-jvm调优参数","link":"#_7-jvm调优参数","children":[]}]},{"level":2,"title":"多线程","slug":"多线程","link":"#多线程","children":[{"level":3,"title":"1.实现多线程的方法","slug":"_1-实现多线程的方法","link":"#_1-实现多线程的方法","children":[]},{"level":3,"title":"2.如何停止正在运行的线程","slug":"_2-如何停止正在运行的线程","link":"#_2-如何停止正在运行的线程","children":[]},{"level":3,"title":"3.notify()和notifyAll()的区别","slug":"_3-notify-和notifyall-的区别","link":"#_3-notify-和notifyall-的区别","children":[]},{"level":3,"title":"4.sleep()和wait()的区别","slug":"_4-sleep-和wait-的区别","link":"#_4-sleep-和wait-的区别","children":[]},{"level":3,"title":"5.volatile的作用","slug":"_5-volatile的作用","link":"#_5-volatile的作用","children":[]},{"level":3,"title":"6.Thread类中的start()和run()的区别","slug":"_6-thread类中的start-和run-的区别","link":"#_6-thread类中的start-和run-的区别","children":[]},{"level":3,"title":"7.为什么wait和notify方法必须在同步代码块中执行","slug":"_7-为什么wait和notify方法必须在同步代码块中执行","link":"#_7-为什么wait和notify方法必须在同步代码块中执行","children":[]},{"level":3,"title":"8.Java中的synchronized和Reentrantlock的区别","slug":"_8-java中的synchronized和reentrantlock的区别","link":"#_8-java中的synchronized和reentrantlock的区别","children":[]},{"level":3,"title":"9.SynchronizedMap和ConcurrentHashMap的区别","slug":"_9-synchronizedmap和concurrenthashmap的区别","link":"#_9-synchronizedmap和concurrenthashmap的区别","children":[]},{"level":3,"title":"10.Java线程池中submit()和execute()的区别","slug":"_10-java线程池中submit-和execute-的区别","link":"#_10-java线程池中submit-和execute-的区别","children":[]},{"level":3,"title":"11.synchronized关键字的了解","slug":"_11-synchronized关键字的了解","link":"#_11-synchronized关键字的了解","children":[]},{"level":3,"title":"12.常用的线程池","slug":"_12-常用的线程池","link":"#_12-常用的线程池","children":[]},{"level":3,"title":"13.简述线程池的理解","slug":"_13-简述线程池的理解","link":"#_13-简述线程池的理解","children":[]},{"level":3,"title":"14.锁的优化机制","slug":"_14-锁的优化机制","link":"#_14-锁的优化机制","children":[]},{"level":3,"title":"15.产生死锁的四个必要条件","slug":"_15-产生死锁的四个必要条件","link":"#_15-产生死锁的四个必要条件","children":[]},{"level":3,"title":"16.线程池的核心线程数怎么设置","slug":"_16-线程池的核心线程数怎么设置","link":"#_16-线程池的核心线程数怎么设置","children":[]},{"level":3,"title":"17.线程安全需要保证几个基本特征","slug":"_17-线程安全需要保证几个基本特征","link":"#_17-线程安全需要保证几个基本特征","children":[]},{"level":3,"title":"18.线程之间如何通信","slug":"_18-线程之间如何通信","link":"#_18-线程之间如何通信","children":[]},{"level":3,"title":"19.线程池原理及核心参数","slug":"_19-线程池原理及核心参数","link":"#_19-线程池原理及核心参数","children":[]},{"level":3,"title":"19.线程池的拒绝策略","slug":"_19-线程池的拒绝策略","link":"#_19-线程池的拒绝策略","children":[]},{"level":3,"title":"20.什么是AQS","slug":"_20-什么是aqs","link":"#_20-什么是aqs","children":[]}]}],"git":{"createdTime":1740497218000,"updatedTime":1745232889000,"contributors":[{"name":"stao","username":"stao","email":"2944922490@qq.com","commits":8,"url":"https://github.com/stao"}]},"readingTime":{"minutes":11.2,"words":3361},"filePathRelative":"article/Java/面试题库/index.md","localizedDate":"2025年2月25日","excerpt":"<p>记录面试题的简单回答，便于记忆，实际可按理解扩充。</p>\\n","autoDesc":true}');export{f as comp,v as data};
