import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,d as n,a as l,b as e,o as t}from"./app-BImRTQmU.js";const h={};function r(p,i){return t(),a("div",null,[i[0]||(i[0]=n("p",null,"理解和掌握设计模式是软件架构设计中的重要组成部分，它提供了一套可复用的解决方案，用于应对常见的软件设计问题。在本文中，我们将全面介绍设计模式的理论基础、分类、各模式的具体实现及实际场景应用。",-1)),l(" more "),i[1]||(i[1]=e(`<h2 id="目录" tabindex="-1"><a class="header-anchor" href="#目录"><span>目录</span></a></h2><ol><li><a href="#1-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%AE%80%E4%BB%8B">设计模式简介</a></li><li><a href="#2-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%9A%84%E4%B8%83%E5%A4%A7%E5%8E%9F%E5%88%99">设计模式的七大原则</a></li><li><a href="#3-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%88%86%E7%B1%BB%E5%8F%8A%E6%80%BB%E8%A7%88">设计模式分类及总览</a></li><li><a href="#4-%E5%88%9B%E5%BB%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F">创建型模式</a><ul><li><a href="#41-%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F">单例模式</a></li><li><a href="#42-%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F">工厂方法模式</a></li><li><a href="#43-%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F">抽象工厂模式</a></li><li><a href="#44-%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F">建造者模式</a></li><li><a href="#45-%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F">原型模式</a></li></ul></li><li><a href="#5-%E7%BB%93%E6%9E%84%E5%9E%8B%E6%A8%A1%E5%BC%8F">结构型模式</a><ul><li><a href="#51-%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F">适配器模式</a></li><li><a href="#52-%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F">桥接模式</a></li><li><a href="#53-%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F">组合模式</a></li><li><a href="#54-%E8%A3%85%E9%A5%B0%E5%99%A8%E6%A8%A1%E5%BC%8F">装饰器模式</a></li><li><a href="#55-%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F">外观模式</a></li><li><a href="#56-%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F">享元模式</a></li><li><a href="#57-%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F">代理模式</a></li></ul></li><li><a href="#6-%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F">行为型模式</a><ul><li><a href="#61-%E8%81%8C%E8%B4%A3%E9%93%BE%E6%A8%A1%E5%BC%8F">职责链模式</a></li><li><a href="#62-%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F">命令模式</a></li><li><a href="#63-%E8%A7%A3%E9%87%8A%E5%99%A8%E6%A8%A1%E5%BC%8F">解释器模式</a></li><li><a href="#64-%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F">迭代器模式</a></li><li><a href="#65-%E4%B8%AD%E4%BB%8B%E8%80%85%E6%A8%A1%E5%BC%8F">中介者模式</a></li><li><a href="#66-%E5%A4%87%E5%BF%98%E5%BD%95%E6%A8%A1%E5%BC%8F">备忘录模式</a></li><li><a href="#67-%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F">观察者模式</a></li><li><a href="#68-%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F">状态模式</a></li><li><a href="#69-%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F">策略模式</a></li><li><a href="#610-%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F">模板方法模式</a></li><li><a href="#611-%E8%AE%BF%E9%97%AE%E8%80%85%E6%A8%A1%E5%BC%8F">访问者模式</a></li></ul></li><li><a href="#7-%E6%80%BB%E7%BB%93">总结</a></li></ol><hr><h2 id="_1-设计模式简介" tabindex="-1"><a class="header-anchor" href="#_1-设计模式简介"><span>1. 设计模式简介</span></a></h2><h3 id="什么是设计模式" tabindex="-1"><a class="header-anchor" href="#什么是设计模式"><span>什么是设计模式？</span></a></h3><p>设计模式是总结和提炼出的面向对象软件设计的经典解决方案，描述了在特定环境下如何组织和设计类与对象以满足某种特定需求或优化软件结构。</p><h3 id="为什么需要设计模式" tabindex="-1"><a class="header-anchor" href="#为什么需要设计模式"><span>为什么需要设计模式？</span></a></h3><ol><li><strong>代码可维护性</strong>：减少代码冗余，提高可扩展性。</li><li><strong>开发效率</strong>：避免重复造轮子，提高开发效率。</li><li><strong>团队沟通</strong>：通过模式命名和结构达成共识。</li><li><strong>代码复用性</strong>：设计模式提供了一种通用的解决问题的方式。</li></ol><hr><h2 id="_2-设计模式的七大原则" tabindex="-1"><a class="header-anchor" href="#_2-设计模式的七大原则"><span>2. 设计模式的七大原则</span></a></h2><table><thead><tr><th>原则</th><th>描述</th></tr></thead><tbody><tr><td><strong>单一职责原则</strong></td><td>一个类只负责一项职责，避免类职责过于复杂。</td></tr><tr><td><strong>开闭原则</strong></td><td>软件应对扩展开放，对修改封闭，新功能通过扩展实现而不是修改原有代码。</td></tr><tr><td><strong>里氏替换原则</strong></td><td>子类可以替换父类，且应用不会受到影响（确保行为一致性）。</td></tr><tr><td><strong>依赖倒置原则</strong></td><td>高层模块不应依赖低层模块，二者应依赖于抽象（接口或抽象类）。</td></tr><tr><td><strong>接口隔离原则</strong></td><td>接口应保持单一，避免类实现不需要的接口方法（接口应小而精）。</td></tr><tr><td><strong>合成复用原则</strong></td><td>优先使用组合或聚合，而不是继承。</td></tr><tr><td><strong>迪米特法则</strong></td><td>类之间应该小范围通信（&quot;最少知道原则&quot;），减少对象之间的耦合度。</td></tr></tbody></table><hr><h2 id="_3-设计模式分类及总览" tabindex="-1"><a class="header-anchor" href="#_3-设计模式分类及总览"><span>3. 设计模式分类及总览</span></a></h2><p>设计模式根据用途主要分为三大类：</p><table><thead><tr><th>类型</th><th>描述</th><th>模式名称</th></tr></thead><tbody><tr><td><strong>创建型模式</strong></td><td>提供创建对象的方式，隐藏对象创建逻辑，提高代码可扩展性和灵活性。</td><td>单例、工厂方法、抽象工厂、建造者、原型</td></tr><tr><td><strong>结构型模式</strong></td><td>关注类和对象如何组成更大的结构，解决类之间的接口或数据关系。</td><td>适配器、桥接、组合、装饰器、外观、享元、代理</td></tr><tr><td><strong>行为型模式</strong></td><td>关注对象间的通信与行为分配，描述算法、职责或交互的抽象化。</td><td>职责链、命令、解释器、迭代器、中介者、备忘录、观察者、状态、策略、模板方法、访问者</td></tr></tbody></table><hr><h2 id="_4-创建型模式" tabindex="-1"><a class="header-anchor" href="#_4-创建型模式"><span>4. 创建型模式</span></a></h2><h3 id="_4-1-单例模式" tabindex="-1"><a class="header-anchor" href="#_4-1-单例模式"><span>4.1 单例模式</span></a></h3><h4 id="定义" tabindex="-1"><a class="header-anchor" href="#定义"><span>定义</span></a></h4><p>确保一个类只有一个实例，并提供一个全局访问点。</p><h4 id="应用场景" tabindex="-1"><a class="header-anchor" href="#应用场景"><span>应用场景</span></a></h4><ul><li>数据库连接池</li><li>日志管理器</li></ul><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Singleton</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    private</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Singleton</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> instance</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    private</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Singleton</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {}</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> synchronized</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Singleton</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> getInstance</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (instance </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">==</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> null</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            instance </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Singleton</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> instance;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="_4-2-工厂方法模式" tabindex="-1"><a class="header-anchor" href="#_4-2-工厂方法模式"><span>4.2 工厂方法模式</span></a></h3><h4 id="定义-1" tabindex="-1"><a class="header-anchor" href="#定义-1"><span>定义</span></a></h4><p>定义一个创建对象的接口，让子类实例化具体的类。</p><h4 id="应用场景-1" tabindex="-1"><a class="header-anchor" href="#应用场景-1"><span>应用场景</span></a></h4><ul><li>简单的产品制造（例如日志记录库）</li></ul><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> interface</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Product</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {}</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> ConcreteProduct</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> implements</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Product</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {}</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Factory</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Product</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> createProduct</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> ConcreteProduct</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="_4-3-抽象工厂模式" tabindex="-1"><a class="header-anchor" href="#_4-3-抽象工厂模式"><span>4.3 抽象工厂模式</span></a></h3><h4 id="定义-2" tabindex="-1"><a class="header-anchor" href="#定义-2"><span>定义</span></a></h4><p>提供一个创建一系列相关或相互依赖对象的接口，而无需指定它们的具体类。</p><h4 id="示例-跨平台界面实现" tabindex="-1"><a class="header-anchor" href="#示例-跨平台界面实现"><span>示例：跨平台界面实现</span></a></h4><ul><li>抽象工厂：GUIFactory</li><li>产品族：Button, Checkbox</li></ul><hr><h3 id="_4-4-建造者模式" tabindex="-1"><a class="header-anchor" href="#_4-4-建造者模式"><span>4.4 建造者模式</span></a></h3><h4 id="定义-3" tabindex="-1"><a class="header-anchor" href="#定义-3"><span>定义</span></a></h4><p>将复杂对象的创建与表示分离，使同样的创建过程可以创建不同的表示。</p><hr><h3 id="_4-5-原型模式" tabindex="-1"><a class="header-anchor" href="#_4-5-原型模式"><span>4.5 原型模式</span></a></h3><h4 id="定义-4" tabindex="-1"><a class="header-anchor" href="#定义-4"><span>定义</span></a></h4><p>通过复制现有对象来创建新对象，而不是通过类实例化。</p><hr><h2 id="_5-结构型模式" tabindex="-1"><a class="header-anchor" href="#_5-结构型模式"><span>5. 结构型模式</span></a></h2><h3 id="_5-1-适配器模式" tabindex="-1"><a class="header-anchor" href="#_5-1-适配器模式"><span>5.1 适配器模式</span></a></h3><h4 id="定义-5" tabindex="-1"><a class="header-anchor" href="#定义-5"><span>定义</span></a></h4><p>将一个接口转换为另一个接口，解决接口不兼容问题。</p><h3 id="_5-2-桥接模式" tabindex="-1"><a class="header-anchor" href="#_5-2-桥接模式"><span>5.2 桥接模式</span></a></h3><h4 id="定义-6" tabindex="-1"><a class="header-anchor" href="#定义-6"><span>定义</span></a></h4><p>将抽象部分与实现部分分离，使它们都可以独立变化。</p><hr><h3 id="_5-3-组合模式" tabindex="-1"><a class="header-anchor" href="#_5-3-组合模式"><span>5.3 组合模式</span></a></h3><p>定义：将对象组合成树形结构以表示“部分-整体”的层次结构，使得客户端对单个对象和组合对象保持一致的处理方式。</p><hr><h2 id="_6-行为型模式" tabindex="-1"><a class="header-anchor" href="#_6-行为型模式"><span>6. 行为型模式</span></a></h2><p>行为型设计模式关注对象之间的通信与职责分配。</p><hr><h3 id="_6-5-状态模式" tabindex="-1"><a class="header-anchor" href="#_6-5-状态模式"><span>6.5 状态模式</span></a></h3><p>定义：让一个对象在其内部状态改变时，其行为也随之改变。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">interface</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> State</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> handle</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> StartState</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> implements</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> State</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> handle</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { ... }</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> }</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> StopState</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> implements</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> State</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> handle</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { ... }</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> }</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Context</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    private</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> State</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> state</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> setState</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">State</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> state</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">state</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> state; }</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> process</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">state</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">handle</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(); }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="_7-总结" tabindex="-1"><a class="header-anchor" href="#_7-总结"><span>7. 总结</span></a></h2><p>设计模式是软件设计的宝贵经验，它们通过解决高内聚低耦合、扩展性、灵活性等问题，使软件开发更加高效和可靠。在实际项目中，选择合适的设计模式可以提升代码质量、减少维护成本。</p>`,65))])}const A=s(h,[["render",r],["__file","设计模式.html.vue"]]),B=JSON.parse('{"path":"/article/%E7%90%86%E8%AE%BA/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F.html","title":"设计模式","lang":"zh-CN","frontmatter":{"title":"设计模式","index":true,"category":["理论"],"tags":["设计模式","面向对象","可维护性"],"description":"理解和掌握设计模式是软件架构设计中的重要组成部分，它提供了一套可复用的解决方案，用于应对常见的软件设计问题。在本文中，我们将全面介绍设计模式的理论基础、分类、各模式的具体实现及实际场景应用。","head":[["meta",{"property":"og:url","content":"https://java-st.blog.csdn.net/my-blog/article/%E7%90%86%E8%AE%BA/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"设计模式"}],["meta",{"property":"og:description","content":"理解和掌握设计模式是软件架构设计中的重要组成部分，它提供了一套可复用的解决方案，用于应对常见的软件设计问题。在本文中，我们将全面介绍设计模式的理论基础、分类、各模式的具体实现及实际场景应用。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-02-27T12:34:01.000Z"}],["meta",{"property":"article:tag","content":"设计模式"}],["meta",{"property":"article:tag","content":"面向对象"}],["meta",{"property":"article:tag","content":"可维护性"}],["meta",{"property":"article:modified_time","content":"2025-02-27T12:34:01.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"设计模式\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-02-27T12:34:01.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"宋涛\\",\\"url\\":\\"https://java-st.blog.csdn.net/\\"}]}"]]},"headers":[{"level":2,"title":"目录","slug":"目录","link":"#目录","children":[]},{"level":2,"title":"1. 设计模式简介","slug":"_1-设计模式简介","link":"#_1-设计模式简介","children":[{"level":3,"title":"什么是设计模式？","slug":"什么是设计模式","link":"#什么是设计模式","children":[]},{"level":3,"title":"为什么需要设计模式？","slug":"为什么需要设计模式","link":"#为什么需要设计模式","children":[]}]},{"level":2,"title":"2. 设计模式的七大原则","slug":"_2-设计模式的七大原则","link":"#_2-设计模式的七大原则","children":[]},{"level":2,"title":"3. 设计模式分类及总览","slug":"_3-设计模式分类及总览","link":"#_3-设计模式分类及总览","children":[]},{"level":2,"title":"4. 创建型模式","slug":"_4-创建型模式","link":"#_4-创建型模式","children":[{"level":3,"title":"4.1 单例模式","slug":"_4-1-单例模式","link":"#_4-1-单例模式","children":[]},{"level":3,"title":"4.2 工厂方法模式","slug":"_4-2-工厂方法模式","link":"#_4-2-工厂方法模式","children":[]},{"level":3,"title":"4.3 抽象工厂模式","slug":"_4-3-抽象工厂模式","link":"#_4-3-抽象工厂模式","children":[]},{"level":3,"title":"4.4 建造者模式","slug":"_4-4-建造者模式","link":"#_4-4-建造者模式","children":[]},{"level":3,"title":"4.5 原型模式","slug":"_4-5-原型模式","link":"#_4-5-原型模式","children":[]}]},{"level":2,"title":"5. 结构型模式","slug":"_5-结构型模式","link":"#_5-结构型模式","children":[{"level":3,"title":"5.1 适配器模式","slug":"_5-1-适配器模式","link":"#_5-1-适配器模式","children":[]},{"level":3,"title":"5.2 桥接模式","slug":"_5-2-桥接模式","link":"#_5-2-桥接模式","children":[]},{"level":3,"title":"5.3 组合模式","slug":"_5-3-组合模式","link":"#_5-3-组合模式","children":[]}]},{"level":2,"title":"6. 行为型模式","slug":"_6-行为型模式","link":"#_6-行为型模式","children":[{"level":3,"title":"6.5 状态模式","slug":"_6-5-状态模式","link":"#_6-5-状态模式","children":[]}]},{"level":2,"title":"7. 总结","slug":"_7-总结","link":"#_7-总结","children":[]}],"git":{"createdTime":1740584260000,"updatedTime":1740659641000,"contributors":[{"name":"stao","username":"stao","email":"2944922490@qq.com","commits":3,"url":"https://github.com/stao"}]},"readingTime":{"minutes":5.28,"words":1583},"filePathRelative":"article/理论/设计模式.md","localizedDate":"2025年2月26日","excerpt":"<p>理解和掌握设计模式是软件架构设计中的重要组成部分，它提供了一套可复用的解决方案，用于应对常见的软件设计问题。在本文中，我们将全面介绍设计模式的理论基础、分类、各模式的具体实现及实际场景应用。</p>\\n","autoDesc":true}');export{A as comp,B as data};
