import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,d as n,a as l,b as e,o as t}from"./app-BImRTQmU.js";const h={};function k(r,i){return t(),a("div",null,[i[0]||(i[0]=n("p",null,"数据结构是计算机科学的核心基础，其关心如何以合理且高效的方式组织、存储和操作数据。理解并掌握数据结构是编程能力提升的关键。",-1)),l(" more "),i[1]||(i[1]=e(`<h2 id="目录" tabindex="-1"><a class="header-anchor" href="#目录"><span>目录</span></a></h2><ol><li><a href="#1-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AE%80%E4%BB%8B">数据结构简介</a></li><li><a href="#2-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%88%86%E7%B1%BB">数据结构分类</a></li><li><a href="#3-%E7%BA%BF%E6%80%A7%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84">线性数据结构</a><ul><li><a href="#31-%E6%95%B0%E7%BB%84-array">数组 (Array)</a></li><li><a href="#32-%E9%93%BE%E8%A1%A8-linked-list">链表 (Linked List)</a></li><li><a href="#33-%E6%A0%88-stack">栈 (Stack)</a></li><li><a href="#34-%E9%98%9F%E5%88%97-queue">队列 (Queue)</a></li><li><a href="#35-%E5%8F%8C%E7%AB%AF%E9%98%9F%E5%88%97-deque">双端队列 (Deque)</a></li><li><a href="#36-%E4%BC%98%E5%85%88%E9%98%9F%E5%88%97-priority-queue">优先队列 (Priority Queue)</a></li></ul></li><li><a href="#4-%E9%9D%9E%E7%BA%BF%E6%80%A7%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84">非线性数据结构</a><ul><li><a href="#41-%E6%A0%91-tree">树 (Tree)</a><ul><li><a href="#411-%E4%BA%8C%E5%8F%89%E6%A0%91-binary-tree">二叉树 (Binary Tree)</a></li><li><a href="#412-%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91-bst">二叉搜索树 (BST)</a></li><li><a href="#413-%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%A0%91-avl">平衡二叉树 (AVL)</a></li><li><a href="#414-%E7%BA%A2%E9%BB%91%E6%A0%91-red-black-tree">红黑树 (Red-Black Tree)</a></li><li><a href="#415-b-%E6%A0%91%E4%B8%8E-b+-%E6%A0%91">B 树与 B+ 树</a></li></ul></li><li><a href="#42-%E5%9B%BE-graph">图 (Graph)</a><ul><li><a href="#421-%E6%97%A0%E5%90%91%E5%9B%BE%E4%B8%8E%E6%9C%89%E5%90%91%E5%9B%BE">无向图与有向图</a></li><li><a href="#422-%E9%82%BB%E6%8E%A5%E7%9F%A9%E9%98%B5%E4%B8%8E%E9%82%BB%E6%8E%A5%E8%A1%A8">邻接矩阵与邻接表</a></li></ul></li></ul></li><li><a href="#5-%E5%93%88%E5%B8%8C%E8%A1%A8-hash-table">哈希表 (Hash Table)</a></li><li><a href="#6-%E6%80%BB%E7%BB%93">总结</a></li></ol><hr><h2 id="_1-数据结构简介" tabindex="-1"><a class="header-anchor" href="#_1-数据结构简介"><span>1. 数据结构简介</span></a></h2><p>数据结构是计算机存储、组织数据的一种方式，旨在提高程序的运行效率和资源利用率。它是算法设计的基础，与算法配合，用于解决各类实际问题。</p><p>一个优秀的数据结构需满足以下特性：</p><ul><li><strong>高效性</strong>：能高效执行基本操作（如插入、删除、遍历）。</li><li><strong>适用性</strong>：适合同类问题或特定场景。</li><li><strong>灵活性</strong>：支持扩展和修改。</li></ul><hr><h2 id="_2-数据结构分类" tabindex="-1"><a class="header-anchor" href="#_2-数据结构分类"><span>2. 数据结构分类</span></a></h2><p>数据结构根据逻辑关系主要分为以下两类：</p><table><thead><tr><th>分类</th><th>描述</th><th>示例</th></tr></thead><tbody><tr><td><strong>线性结构</strong></td><td>数据逐个链接，呈线性关系</td><td>数组、链表、栈、队列</td></tr><tr><td><strong>非线性结构</strong></td><td>数据之间呈复杂逻辑关系（如层次、图形）</td><td>树、图、哈希表</td></tr></tbody></table><hr><h2 id="_3-线性数据结构" tabindex="-1"><a class="header-anchor" href="#_3-线性数据结构"><span>3. 线性数据结构</span></a></h2><p>线性数据结构的特性是元素间具有顺序关系，每个元素最多有一个前驱和一个后继。</p><h3 id="_3-1-数组-array" tabindex="-1"><a class="header-anchor" href="#_3-1-数组-array"><span>3.1 数组 (Array)</span></a></h3><h4 id="特性" tabindex="-1"><a class="header-anchor" href="#特性"><span>特性</span></a></h4><ul><li><strong>存储方式</strong>：元素顺序连续存储，使用固定大小的内存空间。</li><li><strong>访问效率</strong>：通过索引直接访问元素，时间复杂度为 <code>O(1)</code>。</li><li><strong>缺点</strong>：插入和删除操作需要移动大量元素，时间复杂度为 <code>O(n)</code>。</li></ul><h4 id="应用场景" tabindex="-1"><a class="header-anchor" href="#应用场景"><span>应用场景</span></a></h4><ul><li>固定长度的数据存储</li><li>快速随机访问需求</li></ul><h4 id="示例代码-python" tabindex="-1"><a class="header-anchor" href="#示例代码-python"><span>示例代码（Python）</span></a></h4><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 定义数组</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">arr </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">4</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 随机访问</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(arr[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">])  </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 3</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 插入</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">arr.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">insert</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">99</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 删除</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">arr.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">remove</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">99</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="_3-2-链表-linked-list" tabindex="-1"><a class="header-anchor" href="#_3-2-链表-linked-list"><span>3.2 链表 (Linked List)</span></a></h3><h4 id="特性-1" tabindex="-1"><a class="header-anchor" href="#特性-1"><span>特性</span></a></h4><ul><li><strong>存储方式</strong>：通过指针动态存储，每个元素存储地址指向下一个元素。</li><li><strong>访问效率</strong>：按序访问任意元素需要遍历，时间复杂度为 <code>O(n)</code>。</li><li><strong>插入/删除</strong>：常数时间完成，适用于频繁插入/删除场景。</li></ul><h4 id="类型" tabindex="-1"><a class="header-anchor" href="#类型"><span>类型</span></a></h4><ol><li><strong>单向链表</strong>：只有一个方向指针。</li><li><strong>双向链表</strong>：每个节点有前驱和后继指针。</li><li><strong>循环链表</strong>：尾节点指向头节点形成闭环。</li></ol><h4 id="示例代码-单链表-python" tabindex="-1"><a class="header-anchor" href="#示例代码-单链表-python"><span>示例代码（单链表，Python）</span></a></h4><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Node</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    def</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> __init__</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E5C07B;--shiki-dark-font-style:italic;">self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic;"> data</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">):</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.data </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> data</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.next </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> None</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> LinkedList</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    def</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> __init__</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E5C07B;--shiki-dark-font-style:italic;">self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">):</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.head </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> None</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    def</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> insert</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E5C07B;--shiki-dark-font-style:italic;">self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic;"> data</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">):</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        new_node </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;"> Node</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(data)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        new_node.next </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.head</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.head </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> new_node</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    def</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> display</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E5C07B;--shiki-dark-font-style:italic;">self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">):</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        temp </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.head</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        while</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> temp:</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">            print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(temp.data, </span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">end</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot; -&gt; &quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            temp </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> temp.next</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 初始化链表</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">ll </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;"> LinkedList</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">ll.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">insert</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">ll.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">insert</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">ll.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">insert</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">ll.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">display</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()  </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 输出：1 -&gt; 2 -&gt; 3 -&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="_3-3-栈-stack" tabindex="-1"><a class="header-anchor" href="#_3-3-栈-stack"><span>3.3 栈 (Stack)</span></a></h3><h4 id="特性-2" tabindex="-1"><a class="header-anchor" href="#特性-2"><span>特性</span></a></h4><ul><li><strong>存储方式</strong>：后进先出 (LIFO)。</li><li><strong>主要操作</strong>： <ul><li><code>push(x)</code>：压栈，时间复杂度 <code>O(1)</code>。</li><li><code>pop()</code>：出栈，时间复杂度 <code>O(1)</code>。</li></ul></li><li><strong>应用场景</strong>：函数调用堆栈、括号匹配、浏览器的前进与后退。</li></ul><h4 id="示例代码" tabindex="-1"><a class="header-anchor" href="#示例代码"><span>示例代码</span></a></h4><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">stack </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> []</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">stack.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">append</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)   </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 压栈</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">stack.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">append</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(stack.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">pop</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">())  </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 弹栈，输出：2</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="_3-4-队列-queue" tabindex="-1"><a class="header-anchor" href="#_3-4-队列-queue"><span>3.4 队列 (Queue)</span></a></h3><h4 id="特性-3" tabindex="-1"><a class="header-anchor" href="#特性-3"><span>特性</span></a></h4><ul><li><strong>存储方式</strong>：先进先出 (FIFO)。</li><li><strong>主要操作</strong>： <ul><li><code>enqueue(x)</code>：入队。</li><li><code>dequeue()</code>：出队。</li></ul></li><li><strong>应用场景</strong>：任务调度，消息队列。</li></ul><h4 id="示例代码-1" tabindex="-1"><a class="header-anchor" href="#示例代码-1"><span>示例代码</span></a></h4><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> collections </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> deque</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">queue </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;"> deque</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">queue.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">append</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)   </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 入队</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">queue.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">append</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(queue.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">popleft</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">())  </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 出队，输出：1</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="_4-非线性数据结构" tabindex="-1"><a class="header-anchor" href="#_4-非线性数据结构"><span>4. 非线性数据结构</span></a></h2><p>非线性数据结构中，元素之间的关系更加复杂，可以具有层次和网状关系。</p><h3 id="_4-1-树-tree" tabindex="-1"><a class="header-anchor" href="#_4-1-树-tree"><span>4.1 树 (Tree)</span></a></h3><h4 id="定义" tabindex="-1"><a class="header-anchor" href="#定义"><span>定义</span></a></h4><p>树是一个层次化的非线性结构，节点具有父子关系。</p><h4 id="基本术语" tabindex="-1"><a class="header-anchor" href="#基本术语"><span>基本术语</span></a></h4><ul><li><strong>根节点</strong>：树的起始节点。</li><li><strong>叶子节点</strong>：没有子节点的节点。</li><li><strong>深度</strong>：从树的根到特定节点的最长路径。</li><li><strong>高度</strong>：从特定节点到叶子节点的最长路径。</li></ul><hr><h4 id="_4-1-1-二叉树-binary-tree" tabindex="-1"><a class="header-anchor" href="#_4-1-1-二叉树-binary-tree"><span>4.1.1 二叉树 (Binary Tree)</span></a></h4><p>每个节点最多有两个子节点（左子树和右子树）。</p><h4 id="示例代码-2" tabindex="-1"><a class="header-anchor" href="#示例代码-2"><span>示例代码</span></a></h4><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> TreeNode</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    def</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> __init__</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E5C07B;--shiki-dark-font-style:italic;">self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic;"> value</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">):</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.val </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> value</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.left </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> None</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.right </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> None</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="遍历方式" tabindex="-1"><a class="header-anchor" href="#遍历方式"><span>遍历方式</span></a></h4><ol><li><strong>前序遍历</strong> (根-左-右)</li><li><strong>中序遍历</strong> (左-根-右)</li><li><strong>后序遍历</strong> (左-右-根)</li></ol><hr><h4 id="_4-1-2-二叉搜索树-bst" tabindex="-1"><a class="header-anchor" href="#_4-1-2-二叉搜索树-bst"><span>4.1.2 二叉搜索树 (BST)</span></a></h4><ul><li><strong>特性</strong>： <ul><li>左子树值 &lt; 根值</li><li>右子树值 &gt; 根值</li></ul></li><li><strong>操作</strong>： <ul><li>搜索：时间复杂度 <code>O(h)</code>（h 是树的高度）。</li><li>插入/删除：时间复杂度 <code>O(h)</code>。</li></ul></li></ul><hr><h2 id="_5-哈希表-hash-table" tabindex="-1"><a class="header-anchor" href="#_5-哈希表-hash-table"><span>5. 哈希表 (Hash Table)</span></a></h2><h4 id="定义-1" tabindex="-1"><a class="header-anchor" href="#定义-1"><span>定义</span></a></h4><p>基于 &quot;键值对&quot; 的数据存储，使用哈希函数将键映射到存储桶。查找、插入和删除的平均时间复杂度为 <code>O(1)</code>。</p><h4 id="示例代码-python-1" tabindex="-1"><a class="header-anchor" href="#示例代码-python-1"><span>示例代码（Python）</span></a></h4><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">hash_map </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {}</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">hash_map[</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;key1&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;value1&quot;</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(hash_map[</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;key1&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">])  </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 输出：value1</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="_6-总结" tabindex="-1"><a class="header-anchor" href="#_6-总结"><span>6. 总结</span></a></h2><p>数据结构为高效解决问题提供了强大的理论基础和工具，例如提高运行效率，优化存储资源。掌握上述数据结构，并结合场景选择合适的工具，将显著提升您的编程能力和算法设计能力。</p><ul><li><strong>推荐学习资源</strong>： <ul><li>《算法导论》</li><li><a href="https://leetcode.com/" target="_blank" rel="noopener noreferrer">LeetCode</a></li><li><a href="https://www.geeksforgeeks.org/data-structures/" target="_blank" rel="noopener noreferrer">GeeksForGeeks 数据结构教程</a></li></ul></li></ul>`,69))])}const B=s(h,[["render",k],["__file","数据结构.html.vue"]]),A=JSON.parse('{"path":"/article/%E7%90%86%E8%AE%BA/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84.html","title":"数据结构","lang":"zh-CN","frontmatter":{"title":"数据结构","category":["理论"],"tags":["数据结构","算法","计算机科学"],"description":"数据结构是计算机科学的核心基础，其关心如何以合理且高效的方式组织、存储和操作数据。理解并掌握数据结构是编程能力提升的关键。","head":[["meta",{"property":"og:url","content":"https://java-st.blog.csdn.net/my-blog/article/%E7%90%86%E8%AE%BA/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"数据结构"}],["meta",{"property":"og:description","content":"数据结构是计算机科学的核心基础，其关心如何以合理且高效的方式组织、存储和操作数据。理解并掌握数据结构是编程能力提升的关键。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-02-27T03:14:43.000Z"}],["meta",{"property":"article:tag","content":"数据结构"}],["meta",{"property":"article:tag","content":"算法"}],["meta",{"property":"article:tag","content":"计算机科学"}],["meta",{"property":"article:modified_time","content":"2025-02-27T03:14:43.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"数据结构\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-02-27T03:14:43.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"宋涛\\",\\"url\\":\\"https://java-st.blog.csdn.net/\\"}]}"]]},"headers":[{"level":2,"title":"目录","slug":"目录","link":"#目录","children":[]},{"level":2,"title":"1. 数据结构简介","slug":"_1-数据结构简介","link":"#_1-数据结构简介","children":[]},{"level":2,"title":"2. 数据结构分类","slug":"_2-数据结构分类","link":"#_2-数据结构分类","children":[]},{"level":2,"title":"3. 线性数据结构","slug":"_3-线性数据结构","link":"#_3-线性数据结构","children":[{"level":3,"title":"3.1 数组 (Array)","slug":"_3-1-数组-array","link":"#_3-1-数组-array","children":[]},{"level":3,"title":"3.2 链表 (Linked List)","slug":"_3-2-链表-linked-list","link":"#_3-2-链表-linked-list","children":[]},{"level":3,"title":"3.3 栈 (Stack)","slug":"_3-3-栈-stack","link":"#_3-3-栈-stack","children":[]},{"level":3,"title":"3.4 队列 (Queue)","slug":"_3-4-队列-queue","link":"#_3-4-队列-queue","children":[]}]},{"level":2,"title":"4. 非线性数据结构","slug":"_4-非线性数据结构","link":"#_4-非线性数据结构","children":[{"level":3,"title":"4.1 树 (Tree)","slug":"_4-1-树-tree","link":"#_4-1-树-tree","children":[]}]},{"level":2,"title":"5. 哈希表 (Hash Table)","slug":"_5-哈希表-hash-table","link":"#_5-哈希表-hash-table","children":[]},{"level":2,"title":"6. 总结","slug":"_6-总结","link":"#_6-总结","children":[]}],"git":{"createdTime":1740584260000,"updatedTime":1740626083000,"contributors":[{"name":"stao","username":"stao","email":"2944922490@qq.com","commits":2,"url":"https://github.com/stao"}]},"readingTime":{"minutes":4.79,"words":1438},"filePathRelative":"article/理论/数据结构.md","localizedDate":"2025年2月26日","excerpt":"<p>数据结构是计算机科学的核心基础，其关心如何以合理且高效的方式组织、存储和操作数据。理解并掌握数据结构是编程能力提升的关键。</p>\\n","autoDesc":true}');export{B as comp,A as data};
